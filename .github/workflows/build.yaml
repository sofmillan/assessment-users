name: SonarCloud
on:
  push:
    branches:
      - main

env:
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  USER_POOL_ID: ${{ secrets.USER_POOL_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  REGION: ${{ secrets.REGION }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
  ECR_REPOSITORY_LINK: ${{ secrets.ECR_REPOSITORY_LINK }}
  ECR_REPOSITORY_PATH: ${{ secrets.ECR_REPOSITORY_PATH }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ env.ACCESS_KEY }}
          aws-secret-access-key: ${{ env.SECRET_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_NAME }} .
          docker tag ${{ env.ECR_REPOSITORY_NAME }}:latest ${{env.ECR_REPOSITORY_LINK}}:1.0.0
          docker push ${{ env.ECR_REPOSITORY_LINK }}:1.0.0